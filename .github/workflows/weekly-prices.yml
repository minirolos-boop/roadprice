name: Weekly Prices Monitor

on:
  schedule:
    # Lundi 16:00 UTC (18:00 à Paris en été, 17:00 en hiver)
    - cron: "0 16 * * 1"
  workflow_dispatch:
    inputs:
      alert_pct:
        description: "Seuil variation % (ex: 0.10 pour 10%)"
        required: false
        default: "0.10"
      alert_eur:
        description: "Seuil variation € (ex: 150)"
        required: false
        default: "150"
      money_pot:
        description: "Activer extraction MoneyPot ? (true/false)"
        required: false
        default: "true"
      workers:
        description: "Threads pour TOURS (ex: 12)"
        required: false
        default: "12"
      money_pot_workers:
        description: "Threads pour MoneyPot (ex: 12)"
        required: false
        default: "12"
      skip_tours:
        description: "Ne pas récupérer les TOURS ? (true/false)"
        required: false
        default: "false"

concurrency:
  group: pages-build
  cancel-in-progress: false

permissions:
  contents: write
  actions: read
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Trouver le DERNIER run réussi de CE workflow possédant "sqlite_snapshot"
      - name: Find previous successful run that has sqlite_snapshot
        id: find_previous
        uses: actions/github-script@v7
        with:
          script: |
            const workflowFile = 'weekly-prices.yml'; // ce workflow
            const { owner, repo } = context.repo;

            const runs = await github.rest.actions.listWorkflowRuns({
              owner, repo,
              workflow_id: workflowFile,
              status: 'success',
              per_page: 25
            });

            const prev = runs.data.workflow_runs
              .filter(r => r.id !== context.runId)
              .sort((a,b) => new Date(b.created_at) - new Date(a.created_at))[0];

            if (!prev) {
              core.setOutput('found', 'false');
              return;
            }

            const arts = await github.rest.actions.listWorkflowRunArtifacts({
              owner, repo, run_id: prev.id
            });

            const art = arts.data.artifacts.find(a => a.name === 'sqlite_snapshot' && !a.expired);
            if (art) {
              core.setOutput('found', 'true');
              core.setOutput('run_id', String(prev.id));
            } else {
              core.setOutput('found', 'false');
            }

      # 2) Télécharger l’artefact 'sqlite_snapshot' depuis le run précédent
      #    (download d'un run précédent => action tierce)
      - name: Restore previous DB (artifact)
        if: steps.find_previous.outputs.found == 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ steps.find_previous.outputs.run_id }}
          name: sqlite_snapshot
          path: data
        continue-on-error: true

      - name: Ensure DB filename
        run: |
          mkdir -p data
          if [ ! -f "data/weroad.db" ]; then
            if ls data/*.db >/dev/null 2>&1; then
              mv data/*.db data/weroad.db
            fi
          fi
          ls -lah data || true

      - name: Set up Python (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      # 3) Exécuter le collecteur
      - name: Run weekly monitor
        env:
          WEROAD_TOKEN: ${{ secrets.WEROAD_TOKEN }}
          # Valeurs env par défaut (écrasées par workflow_dispatch si fourni)
          ALERT_PCT: ${{ inputs.alert_pct || '0.10' }}
          ALERT_EUR: ${{ inputs.alert_eur || '150' }}
        run: |
          mkdir -p data

          # Flags dynamiques
          MP_FLAG=""
          if [ "${{ inputs.money_pot || 'true' }}" = "true" ]; then
            MP_FLAG="--money-pot --money-pot-workers ${{ inputs.money_pot_workers || '12' }}"
          fi

          TOURS_FLAGS=""
          if [ "${{ inputs.skip_tours || 'false' }}" = "true" ]; then
            TOURS_FLAGS="--skip-tours"
          else
            TOURS_FLAGS="--workers ${{ inputs.workers || '12' }}"
          fi

          echo "Running monitor with:"
          echo "  ALERT_PCT=${ALERT_PCT}"
          echo "  ALERT_EUR=${ALERT_EUR}"
          echo "  ${MP_FLAG} ${TOURS_FLAGS}"

          python monitor.py \
            --out weekly_report.xlsx \
            --sqlite data/weroad.db \
            ${MP_FLAG} \
            ${TOURS_FLAGS}

      - name: Build single-page dashboard (docs/index.md)
        run: python summarize.py

      # Artefacts techniques
      - name: Upload Excel artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly_report
          path: weekly_report.xlsx
          retention-days: 30

      - name: Upload SQLite artifact
        uses: actions/upload-artifact@v4
        with:
          name: sqlite_snapshot
          path: data/weroad.db
          retention-days: 90

      # --- Build + Publish GitHub Pages ---
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
