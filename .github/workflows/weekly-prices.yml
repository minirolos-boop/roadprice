name: Weekly Prices Monitor

on:
  schedule:
    - cron: "0 16 * * *"         # 18:00 FR (UTC+2 l’été) -> ajuste si besoin
  workflow_dispatch: {}

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # (facultatif) récupérer la DB d’un run précédent si elle existe
      - name: Find previous successful run that has sqlite_snapshot
        id: find-art
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'success',
              per_page: 20
            });
            let runId = null;
            for (const r of runs.data.workflow_runs) {
              try {
                const arts = await github.rest.actions.listWorkflowRunArtifacts({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: r.id
                });
                if (arts.data.artifacts.find(a => a.name === 'sqlite_snapshot')) {
                  runId = r.id; break;
                }
              } catch {}
            }
            core.setOutput('run_id', runId || '');

      - name: Restore previous DB (artifact)
        if: steps.find-art.outputs.run_id != ''
        uses: actions/download-artifact@v4
        with:
          name: sqlite_snapshot
          path: data
          run-id: ${{ steps.find-art.outputs.run_id }}

      - name: Ensure DB filename
        run: |
          mkdir -p data
          if [ ! -f "data/weroad.db" ]; then
            if ls data/*.db >/dev/null 2>&1; then mv data/*.db data/weroad.db; fi
          fi

      - name: Set up Python (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run weekly monitor
        env:
          ALERT_PCT: "0.10"
          ALERT_EUR: "150"
          WEROAD_TOKEN: ${{ secrets.WEROAD_TOKEN }}
        run: |
          mkdir -p data
          python monitor.py --out weekly_report.xlsx --sqlite data/weroad.db

      - name: Build single-page dashboard (docs/index.md)
        run: python summarize.py

      # Publier les artefacts techniques (optionnel)
      - name: Upload Excel artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly_report
          path: weekly_report.xlsx
          retention-days: 30

      - name: Upload SQLite artifact
        uses: actions/upload-artifact@v4
        with:
          name: sqlite_snapshot
          path: data/weroad.db
          retention-days: 90

      # ---------- GitHub Pages via Actions (avec build Jekyll) ----------
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs        # là où se trouve index.md + _config.yml
          destination: ./_site  # Jekyll génère index.html dans ce dossier

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
