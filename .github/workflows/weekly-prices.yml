name: Weekly Prices Monitor

on:
  schedule:
    - cron: "0 6 * * 1"     # 18:00 Paris (16:00 UTC)
  workflow_dispatch: {}

concurrency:
  group: pages-build
  cancel-in-progress: false

permissions:
  contents: write
  actions: read        # nécessaire pour lister les runs/artefacts
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Trouver le DERNIER run réussi de CE workflow possédant "sqlite_snapshot"
      - name: Find previous successful run that has sqlite_snapshot
        id: find_previous
        uses: actions/github-script@v7
        with:
          script: |
            const workflowFile = 'weekly-prices.yml'; // ce workflow
            const { owner, repo } = context.repo;

            // Lister les runs réussis
            const runs = await github.rest.actions.listWorkflowRuns({
              owner, repo,
              workflow_id: workflowFile,
              status: 'success',
              per_page: 25
            });

            // Prendre le dernier run ≠ run courant
            const prev = runs.data.workflow_runs
              .filter(r => r.id !== context.runId)
              .sort((a,b) => new Date(b.created_at) - new Date(a.created_at))[0];

            if (!prev) {
              core.setOutput('found', 'false');
              return;
            }

            // Lister les artefacts de ce run
            const arts = await github.rest.actions.listWorkflowRunArtifacts({
              owner, repo, run_id: prev.id
            });

            const art = arts.data.artifacts.find(a => a.name === 'sqlite_snapshot' && !a.expired);
            if (art) {
              core.setOutput('found', 'true');
              core.setOutput('run_id', String(prev.id));
            } else {
              core.setOutput('found', 'false');
            }

      # 2) Télécharger l’artefact 'sqlite_snapshot' depuis le run précédent
      #    -> IMPORTANT: 'actions/download-artifact@v4' ne marche pas pour les runs précédents.
      #       On utilise 'dawidd6/action-download-artifact@v2' qui supporte run_id.
      - name: Restore previous DB (artifact)
        if: steps.find_previous.outputs.found == 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ steps.find_previous.outputs.run_id }}
          name: sqlite_snapshot
          path: data
        # au cas où il n'y a finalement rien à récupérer (artefact expiré...), on ne bloque pas le job
        continue-on-error: true

      - name: Ensure DB filename
        run: |
          mkdir -p data
          if [ ! -f "data/weroad.db" ]; then
            if ls data/*.db >/dev/null 2>&1; then
              mv data/*.db data/weroad.db
            fi
          fi
          ls -lah data || true

      - name: Set up Python (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run weekly monitor
        env:
          ALERT_PCT: "0.10"
          ALERT_EUR: "150"
          WEROAD_TOKEN: ${{ secrets.WEROAD_TOKEN }}
        run: |
          mkdir -p data
          python monitor.py --out weekly_report.xlsx --sqlite data/weroad.db

      - name: Build single-page dashboard (docs/index.md)
        run: python summarize.py

      # Artefacts techniques (optionnels)
      - name: Upload Excel artifact
        uses: actions/upload-artifact@v4
        with:
          name: weekly_report
          path: weekly_report.xlsx
          retention-days: 30

      - name: Upload SQLite artifact
        uses: actions/upload-artifact@v4
        with:
          name: sqlite_snapshot
          path: data/weroad.db
          retention-days: 90

      # --- Build + Publish GitHub Pages ---
      - name: Configure Pages
        uses: actions/configure-pages@v5

      # Compile docs/ (index.md) en HTML (_site)
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
